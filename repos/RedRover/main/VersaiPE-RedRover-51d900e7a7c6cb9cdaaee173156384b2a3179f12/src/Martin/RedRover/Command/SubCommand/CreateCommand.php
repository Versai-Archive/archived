<?php


namespace Martin\RedRover\Command\SubCommand;


use Exception;
use Martin\GameAPI\Command\BaseGameSubCommand;
use Martin\GameAPI\GamePlugin;
use Martin\RedRover\Form\CreateForm;
use Martin\RedRover\Game\RedRover;
use Martin\RedRover\Main;
use pocketmine\command\CommandSender;
use pocketmine\Player;

class CreateCommand extends BaseGameSubCommand
{
    /**
     * @throws Exception
     */
    public function onRun(CommandSender $sender, array $args): void
    {
        if (!($sender instanceof Player)) {
            $sender->sendMessage($this->getPlugin()->getMessage("commands.error.player-only"));
            return;
        }

        if (empty($args[0])) {
            $sender->sendForm(new CreateForm());
            return;
        }

        $map = $this->getPlugin()->getMap($args[0]);
        if ($map === null) {
            $sender->sendMessage($this->getPlugin()->getMessage("commands.create.map-not-found", ["map" => $args[0]]));
            return;
        }

        $private = false;

        if (empty($args[1])) {
            $private = false;
        } else if (strtolower($args[0]) === "private") {
            $private = true;
        }

        $game = new RedRover($this->getPlugin(), $sender, $map, $private);
        $game->addSpectator($sender);

        $this->getPlugin()->queueGame($game);

        if ($private) {
            $sender->sendMessage($this->getPlugin()->getMessage("commands.create.hosting-private", ["code" => $game->getCode()]));
        } else {
            $sender->sendMessage($this->getPlugin()->getMessage("commands.create.hosting-public", ["player" => $sender->getName()]));
        }
    }

    /**
     * @return Main
     */
    public function getPlugin(): GamePlugin
    {
        return parent::getPlugin(); // TODO: Change the autogenerated stub
    }

    protected function prepare(): void
    {
        $this->setPermission("redrover.games");
    }
}