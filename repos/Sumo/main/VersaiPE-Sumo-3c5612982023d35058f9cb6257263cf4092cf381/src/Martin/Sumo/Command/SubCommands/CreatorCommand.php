<?php


namespace Martin\Sumo\Command\SubCommands;


use Martin\GameAPI\Command\Defaults\CreateMapCommand;
use Martin\GameAPI\Game\Maps\Map;
use Martin\GameAPI\Game\Maps\UnfinishedMap;
use Martin\GameAPI\GamePlugin;
use Martin\Sumo\Main;
use pocketmine\Player;
use pocketmine\utils\TextFormat;

class CreatorCommand extends CreateMapCommand
{
    public static array $cache = [];

    protected function prepare(): void
    {
        $this->setPermission("sumo.creator");
    }

    protected function create(Player $sender, array $args)
    {
        if (isset($args[0])) {
            $this->getFromCache($sender)->setName($args[0]);
            $sender->sendMessage(Main::PREFIX . TextFormat::GRAY . "Initalized creator mode with map name {$args[0]}");
        } else {
            $sender->sendMessage(Main::PREFIX . TextFormat::GRAY . "Initalized creator mode");
        }
    }

    public function getFromCache(Player $player): UnfinishedMap
    {
        $name = $player->getLowerCaseName();

        if (isset(self::$cache[$name])) {
            return self::$cache[$name];
        }

        self::$cache[$name] = new UnfinishedMap();
        self::$cache[$name]->setWorld($player->getLevel());
        return self::$cache[$name];
    }

    protected function name(Player $sender, array $args)
    {
        if (isset($args[0])) {
            $this->getFromCache($sender)->setName($args[0]);
            $sender->sendMessage(Main::PREFIX . TextFormat::GRAY . "Set the maps name to {$args[0]}");
            return;
        }

        $sender->sendMessage(Main::PREFIX . TextFormat::RED . "You have to provide an argument with a name");
    }

    protected function position(Player $sender, array $args)
    {
        $this->getFromCache($sender)->pushPositionByPlayer($sender);
        $sender->sendMessage(Main::PREFIX . TextFormat::GRAY . "Successfully added a new position");
    }

    protected function author(Player $sender, array $args)
    {
        if (isset($args[0])) {
            $this->getFromCache($sender)->setAuthor($args[0]);
            $sender->sendMessage(Main::PREFIX . TextFormat::GRAY . "Set the author to {$args[0]}");
            return;
        }

        $sender->sendMessage(Main::PREFIX . TextFormat::RED . "You have to provide an argument with an author");
    }

    protected function stop(Player $sender, array $args)
    {
        if ($this->getFromCache($sender)) {
            unset(self::$cache[$sender->getLowerCaseName()]);
        }
        $sender->sendMessage(Main::PREFIX . TextFormat::RED . "Cleared your current map without saving it");
    }

    protected function save(Player $sender, array $args)
    {
        $unfinishedParsed = UnfinishedMap::parse($this->getFromCache($sender));
        $map = Map::fromJSON($unfinishedParsed);
        if (!$map) {
            $sender->sendMessage(Main::PREFIX . TextFormat::RED . "Could not parse the map! Reason: Missing argument at creation");
            return;
        }

        $this->getPlugin()->saveMap($map);
        $sender->sendMessage(Main::PREFIX . TextFormat::GRAY . "Saved the current map");
    }

    /**
     * @return Main
     */
    public function getPlugin(): GamePlugin
    {
        return parent::getPlugin(); // TODO: Change the autogenerated stub
    }
}