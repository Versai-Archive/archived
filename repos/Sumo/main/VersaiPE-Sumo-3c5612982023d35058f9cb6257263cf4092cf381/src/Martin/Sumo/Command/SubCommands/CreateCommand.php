<?php


namespace Martin\Sumo\Command\SubCommands;


use Exception;
use Martin\GameAPI\Command\BaseGameSubCommand;
use Martin\GameAPI\GamePlugin;
use Martin\Sumo\Form\CreateForm;
use Martin\Sumo\Game\Sumo;
use Martin\Sumo\Main;
use pocketmine\command\CommandSender;
use pocketmine\Player;
use pocketmine\Server;
use pocketmine\utils\TextFormat;

class CreateCommand extends BaseGameSubCommand
{
    /**
     * @throws Exception
     */
    public function onRun(CommandSender $sender, array $args): void
    {
        if (!$sender instanceof Player) {
            return;
        }

        if (empty($args[0])) {
            if ($this->getPlugin()->hasMaps()) {
                $sender->sendForm(new CreateForm($this->getPlugin()));
            } else {
                $sender->sendMessage(Main::PREFIX . TextFormat::RED . "No maps are currently loaded!");
            }
        }

        $mapName = $args[0];
        if (($map = $this->getPlugin()->getMap($mapName)) === null) {
            $sender->sendMessage(Main::PREFIX . "Seems like this map doesn't exist!");
            return;
        }

        $private = false;
        if (isset($args[1])) {
            if (($argument = strtolower($args[1])) === "false" || $argument === "private") {
                $private = true;
            }
        }

        $p = Sumo::MIN_PLAYERS;
        $this->getPlugin()->queueGame($sumo = new Sumo($this->getPlugin(), $sender, $map));
        $sumo->setPrivate($private);
        $sumo->addPlayer($sender);
        $sender->sendMessage(Main::PREFIX . TextFormat::DARK_GRAY . "Information! To start a game use /sumo start and don't forget {$p} players are required to start the event!");

        if ($private) {
            $sender->sendMessage(Main::PREFIX . TextFormat::DARK_GRAY . "Since you started an private game players must access this game with the code! " . TextFormat::RED . "/sumo join " . $sumo->getCode());
        } else {
            Server::getInstance()->broadcastMessage(Main::PREFIX . TextFormat::GRAY . $sender->getName() . " is hosting a sumo tournament! You may join using /sumo join {$sender->getName()}");
        }
    }

    /**
     * @return Main
     */
    public function getPlugin(): GamePlugin
    {
        return parent::getPlugin(); // TODO: Change the autogenerated stub
    }

    protected function prepare(): void
    {
        $this->setPermission("sumo.games");
    }
}